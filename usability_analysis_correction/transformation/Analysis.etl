pre createEvaluation {
	var evaluation = new AnalysisDefects!Evaluation;
	evaluation.guiName = UsabilityGUI!GUI.allInstances().first().guiElement.name;
}

post evaluationDone {
	System.user.inform("Usability analysis finalized. A report has been generated.");	
}

operation String getR() : Integer {
	return self.substring(1,3).hexToInt();
}

operation String getG() : Integer {
	return self.substring(3,5).hexToInt();
}

operation String getB() : Integer {
	return self.substring(5,7).hexToInt();
}

operation String hexToInt() : Integer {
	var eqs = new Map;
	eqs.put("A", 10); eqs.put("a", 10);
	eqs.put("B", 11); eqs.put("b", 11);
	eqs.put("C", 12); eqs.put("c", 12);
	eqs.put("D", 13); eqs.put("d", 13);
	eqs.put("E", 14); eqs.put("e", 14);
	eqs.put("F", 15); eqs.put("f", 15);
	
	var chars = self.toCharSequence().invert();
	
	var number = new Integer;
	var result = 0;
	for (i in Sequence {0..chars.size()-1}) {
		var char = chars.get(i);
		if (eqs.containsKey(char))
			number = eqs.get(char);
		else
			number = char.asInteger();
			
		result = result + number * 16.pow(i);
	}

	return result.asInteger();
}

operation String getLuminance() : Real {
	var initialValues = Sequence{self.getR(), self.getG(), self.getB()};
	var finalValues = new Sequence;
	
	for (value : Integer in initialValues) {
		var finalValue = value.asReal()/255;
		if (finalValue <= 0.03928)
			finalValue = finalValue/12.92;
		else
			finalValue = ((finalValue+0.055)/1.055).pow(2.4);
			
		finalValues.add(finalValue);
	}
	
	return finalValues.first()*0.2126 + finalValues.second()*0.7152 + finalValues.third()*0.0722;
}




operation Font_sizes_calculation(usabilityElement : UsabilityGUI!GUI)
	: Integer {
	return UsabilityGUI!Text.allInstances().collect(t|t.size).asSet().size();
}

@greedy
rule Font_sizes
    transform usabilityElement : UsabilityGUI!GUI
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Font_sizes_calculation(usabilityElement) >= 1 and Font_sizes_calculation(usabilityElement) <= 2)
	
		defect.description = "Too many distinct font sizes";
		defect.importance = AnalysisDefects!Importance#Medium;
		defect.usabilityRule = "Font sizes";
		defect.value = Font_sizes_calculation(usabilityElement).asString() + " font sizes";
		defect.correctValue = "1-2 font sizes"; 
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Tabfocus_calculation(usabilityElement : UsabilityGUI!Container)
	: String {
	
				// Tabfocus in the panel sorted by its value
				var orderedTabfocus = usabilityElement.content.select(elem | elem.isTypeOf(UsabilityGUI!Tabfocus)).sortBy(elem | elem.value);
		
				var errors = '';
		
				// If there are no elements with tabfocus property, we finish
				if (orderedTabfocus.size() == 0) return errors;
				// The first tabfocus defined must be zero
				if (orderedTabfocus.first().value <> 0) errors = errors + 'The first tabfocus defined must be zero. ';
		
				for (i in Sequence{1..orderedTabfocus.size()-1}) {	
					var tabfocus = orderedTabfocus.at(i);
					var previousTabfocus = orderedTabfocus.at(i-1);
					
					// The tabfocus number must be incremental, no gaps
					if (tabfocus.value <> previousTabfocus.value + 1) {
						errors = errors + 'The tabfocus number must be incremental, no gaps or repetitions. ';
					}
					// The element must be around the same vertical position or lower than its predecessor
					if (previousTabfocus.box.position.y - tabfocus.box.position.y > 5) {		
						errors = errors + 'The element ' + tabfocus.guiElement.name + ' is higher than its predecessor. ';
					}
					// If it's around the same vertical position, it must be on the right of its predecessor
					var verticalDifference = (tabfocus.box.position.y - previousTabfocus.box.position.y).abs();
					if (verticalDifference <= 5 and tabfocus.box.position.x < previousTabfocus.box.position.x) {
						errors = errors + 'The element ' + tabfocus.guiElement.name + ' is around the same vertical position but on the left of its predecessor';
					}		
				}
			
				return errors;		
			
}

@greedy
rule Tabfocus
    transform usabilityElement : UsabilityGUI!Container
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Sequence{''}.includes(Tabfocus_calculation(usabilityElement)))
	
		defect.description = "Tabfocus property has not been set correctly on the elements of the panel";
		defect.importance = AnalysisDefects!Importance#Medium;
		defect.usabilityRule = "Tabfocus";
		defect.value = Tabfocus_calculation(usabilityElement).asString();
		defect.correctValue = "''";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	

operation Contrast_restriction(usabilityElement : UsabilityGUI!Color) {
	return usabilityElement.foreground.isDefined() and usabilityElement.background.isDefined();
}

operation Contrast_calculation(usabilityElement : UsabilityGUI!Color)
	: Real {
	return (usabilityElement.background.getLuminance().max(usabilityElement.foreground.getLuminance())+0.05)/(usabilityElement.background.getLuminance().min(usabilityElement.foreground.getLuminance())+0.05);
}

@greedy
rule Contrast
    transform usabilityElement : UsabilityGUI!Color
	to defect : AnalysisDefects!Defect { 
	
	guard :  Contrast_restriction(usabilityElement) and  
			not(Contrast_calculation(usabilityElement) >= 4.5)
	
		defect.description = "Low contrast between foreground and background colors";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Contrast";
		defect.value = Contrast_calculation(usabilityElement).asString() + " ";
		defect.correctValue = "4.5-*";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	

operation Separation_restriction(usabilityElement : UsabilityGUI!Box) {
	return usabilityElement.container.isDefined();
}

operation Separation_calculation(usabilityElement : UsabilityGUI!Box)
	: String {
	return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and not((usabilityElement.position.x - (e2.position.x+e2.dimension.x) >= 5) or (e2.position.x - (usabilityElement.position.x+usabilityElement.dimension.x) >= 5) or (usabilityElement.position.y - (e2.position.y+e2.dimension.y) >= 5) or (e2.position.y - (usabilityElement.position.y+usabilityElement.dimension.y) >= 5))).collect(e2|e2.guiElement.name).concat(',');
}

@greedy
rule Separation
    transform usabilityElement : UsabilityGUI!Box
	to defect : AnalysisDefects!Defect { 
	
	guard :  Separation_restriction(usabilityElement) and  
			not(Sequence{''}.includes(Separation_calculation(usabilityElement)))
	
		defect.description = "The element is too close to other elements in its container";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Separation";
		defect.value = Separation_calculation(usabilityElement).asString();
		defect.correctValue = "''";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Font_types_calculation(usabilityElement : UsabilityGUI!GUI)
	: Integer {
	return UsabilityGUI!Text.allInstances().collect(t|t.font).asSet().size();
}

@greedy
rule Font_types
    transform usabilityElement : UsabilityGUI!GUI
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Font_types_calculation(usabilityElement) >= 1 and Font_types_calculation(usabilityElement) <= 2)
	
		defect.description = "Too many distinct font types";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Font types";
		defect.value = Font_types_calculation(usabilityElement).asString() + " font types";
		defect.correctValue = "1-2 font types"; 
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	

operation Label_input_separation_restriction(usabilityElement : UsabilityGUI!Input) {
	return usabilityElement.label.isDefined();
}

operation Label_input_separation_calculation(usabilityElement : UsabilityGUI!Input)
	: Integer {
	return (usabilityElement.box.position.x-(usabilityElement.label.box.position.x+usabilityElement.label.box.dimension.x)).max(usabilityElement.box.position.y-(usabilityElement.label.box.position.y+usabilityElement.label.box.dimension.y));
}

@greedy
rule Label_input_separation
    transform usabilityElement : UsabilityGUI!Input
	to defect : AnalysisDefects!Defect { 
	
	guard :  Label_input_separation_restriction(usabilityElement) and  
			not(Label_input_separation_calculation(usabilityElement) >= 0 and Label_input_separation_calculation(usabilityElement) <= 25)
	
		defect.description = "The label is too far from its input field";
		defect.importance = AnalysisDefects!Importance#Medium;
		defect.usabilityRule = "Label input separation";
		defect.value = Label_input_separation_calculation(usabilityElement).asString() + " dp";
		defect.correctValue = "0-25 dp"; 
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Menu_depth_calculation(usabilityElement : UsabilityGUI!Menu)
	: Integer {
	
				var stack = new Sequence;
				stack.add(usabilityElement);
				var depth = 0;
				var maxDepth = 0;
				var count = 0;
		
				while(not stack.isEmpty()) {
					var last = stack.last();
					stack.remove(last);
					// Extraction of an already explored father
					if (last.isKindOf(Real)) {
						depth = depth - 1;
					}
					else if (not last.items.isEmpty()) {
						// We replace a father by a number
						stack.add(count);   
						stack.addAll(last.items);
						depth = depth + 1;
						if (depth > maxDepth)
							maxDepth = depth;
					}
					count = count + 1;
				}
				return maxDepth;		
			
}

@greedy
rule Menu_depth
    transform usabilityElement : UsabilityGUI!Menu
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Menu_depth_calculation(usabilityElement) >= 1 and Menu_depth_calculation(usabilityElement) <= 3)
	
		defect.description = "Menu structure is too deep";
		defect.importance = AnalysisDefects!Importance#Medium;
		defect.usabilityRule = "Menu depth";
		defect.value = Menu_depth_calculation(usabilityElement).asString() + " levels";
		defect.correctValue = "1-3 levels"; 
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Label_text_length_calculation(usabilityElement : UsabilityGUI!Label)
	: Integer {
	return usabilityElement.text.text.length();
}

@greedy
rule Label_text_length
    transform usabilityElement : UsabilityGUI!Label
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Label_text_length_calculation(usabilityElement) >= 1 and Label_text_length_calculation(usabilityElement) <= 50)
	
		defect.description = "Label text is too long";
		defect.importance = AnalysisDefects!Importance#Medium;
		defect.usabilityRule = "Label text length";
		defect.value = Label_text_length_calculation(usabilityElement).asString() + " characters";
		defect.correctValue = "1-50 characters"; 
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Font_size_calculation(usabilityElement : UsabilityGUI!Text)
	: Real {
	return usabilityElement.size;
}

@greedy
rule Font_size
    transform usabilityElement : UsabilityGUI!Text
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Font_size_calculation(usabilityElement) >= 24.0)
	
		defect.description = "Font size is too small";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Font size";
		defect.value = Font_size_calculation(usabilityElement).asString() + " ";
		defect.correctValue = "24.0-*";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	

operation Vertical_align_restriction(usabilityElement : UsabilityGUI!Box) {
	return usabilityElement.container.isDefined();
}

operation Vertical_align_calculation(usabilityElement : UsabilityGUI!Box)
	: String {
	
				var margin = 10;
				return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and (((usabilityElement.position.y-e2.position.y).abs()>0 and (usabilityElement.position.y-e2.position.y).abs()<margin) or (((usabilityElement.position.y+usabilityElement.dimension.y) - (e2.position.y+e2.dimension.y)).abs()>0 and ((usabilityElement.position.y+usabilityElement.dimension.y) - (e2.position.y+e2.dimension.y)).abs()<margin))).collect(e2|e2.guiElement.name).concat(',');	
			
}

@greedy
rule Vertical_align
    transform usabilityElement : UsabilityGUI!Box
	to defect : AnalysisDefects!Defect { 
	
	guard :  Vertical_align_restriction(usabilityElement) and  
			not(Sequence{''}.includes(Vertical_align_calculation(usabilityElement)))
	
		defect.description = "The element is not  vertically aligned with other elements in its container";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Vertical align";
		defect.value = Vertical_align_calculation(usabilityElement).asString();
		defect.correctValue = "''";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	

operation Horizontal_align_restriction(usabilityElement : UsabilityGUI!Box) {
	return usabilityElement.container.isDefined();
}

operation Horizontal_align_calculation(usabilityElement : UsabilityGUI!Box)
	: String {
	
				var margin = 40;
				return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and (((usabilityElement.position.x-e2.position.x).abs()>0 and (usabilityElement.position.x-e2.position.x).abs()<margin) or (((usabilityElement.position.x+usabilityElement.dimension.x) - (e2.position.x+e2.dimension.x)).abs()>0 and ((usabilityElement.position.x+usabilityElement.dimension.x) - (e2.position.x+e2.dimension.x)).abs()<margin))).collect(e2|e2.guiElement.name).concat(',');		
			
}

@greedy
rule Horizontal_align
    transform usabilityElement : UsabilityGUI!Box
	to defect : AnalysisDefects!Defect { 
	
	guard :  Horizontal_align_restriction(usabilityElement) and  
			not(Sequence{''}.includes(Horizontal_align_calculation(usabilityElement)))
	
		defect.description = "The element is not horizontally aligned with other elements in its container";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Horizontal align";
		defect.value = Horizontal_align_calculation(usabilityElement).asString();
		defect.correctValue = "''";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Number_of_elements_calculation(usabilityElement : UsabilityGUI!Container)
	: Integer {
	return usabilityElement.content.select(b|b.isTypeOf(UsabilityGUI!Box)).size();
}

@greedy
rule Number_of_elements
    transform usabilityElement : UsabilityGUI!Container
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Number_of_elements_calculation(usabilityElement) >= 0 and Number_of_elements_calculation(usabilityElement) <= 20)
	
		defect.description = "Too many elements in this container";
		defect.importance = AnalysisDefects!Importance#Low;
		defect.usabilityRule = "Number of elements";
		defect.value = Number_of_elements_calculation(usabilityElement).asString() + " elements";
		defect.correctValue = "0-20 elements"; 
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Labeled_input_calculation(usabilityElement : UsabilityGUI!Input)
	: Boolean {
	return usabilityElement.label.isDefined();
}

@greedy
rule Labeled_input
    transform usabilityElement : UsabilityGUI!Input
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Labeled_input_calculation(usabilityElement) == true)
	
		defect.description = "This input does not have any label associated";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Labeled input";
		defect.value = Labeled_input_calculation(usabilityElement).asString();
		defect.correctValue = "true";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Accessibility_information_calculation(usabilityElement : UsabilityGUI!AccessibilityInformation)
	: Boolean {
	return usabilityElement.info.length()>0;
}

@greedy
rule Accessibility_information
    transform usabilityElement : UsabilityGUI!AccessibilityInformation
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Accessibility_information_calculation(usabilityElement) == true)
	
		defect.description = "Accessibility information has not been set";
		defect.importance = AnalysisDefects!Importance#Medium;
		defect.usabilityRule = "Accessibility information";
		defect.value = Accessibility_information_calculation(usabilityElement).asString();
		defect.correctValue = "true";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	


operation Tooltip_calculation(usabilityElement : UsabilityGUI!Tooltip)
	: Boolean {
	return usabilityElement.text.length() > 0;
}

@greedy
rule Tooltip
    transform usabilityElement : UsabilityGUI!Tooltip
	to defect : AnalysisDefects!Defect { 
	
	guard :  
			not(Tooltip_calculation(usabilityElement) == true)
	
		defect.description = "Tooltip text has not been set";
		defect.importance = AnalysisDefects!Importance#Low;
		defect.usabilityRule = "Tooltip";
		defect.value = Tooltip_calculation(usabilityElement).asString();
		defect.correctValue = "true";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	

operation Overlap_restriction(usabilityElement : UsabilityGUI!Box) {
	return usabilityElement.container.isDefined();
}

operation Overlap_calculation(usabilityElement : UsabilityGUI!Box)
	: String {
	return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and not((usabilityElement.position.x >= (e2.position.x+e2.dimension.x)) or ((usabilityElement.position.x+usabilityElement.dimension.x) <= e2.position.x) or (usabilityElement.position.y >= (e2.position.y+e2.dimension.y)) or ((usabilityElement.position.y+usabilityElement.dimension.y) <= e2.position.y))).collect(e2|e2.guiElement.name).concat(',');
}

@greedy
rule Overlap
    transform usabilityElement : UsabilityGUI!Box
	to defect : AnalysisDefects!Defect { 
	
	guard :  Overlap_restriction(usabilityElement) and  
			not(Sequence{''}.includes(Overlap_calculation(usabilityElement)))
	
		defect.description = "This element overlaps other elements in its container";
		defect.importance = AnalysisDefects!Importance#High;
		defect.usabilityRule = "Overlap";
		defect.value = Overlap_calculation(usabilityElement).asString();
		defect.correctValue = "''";
		defect.element = usabilityElement.guiElement.name;
		
		evaluation.defects.add(defect);
	} 
	
	
