catalogue {
	name: "TestEvaluator"
	
	rule {
		name: "Font sizes"	
		description {
			definition: "Checks the number of distinct font sizes within the interface"
			errorMessage: "Too many distinct font sizes"
		}
		importance: Medium
		elementType: "GUI"
		calculation: "return UsabilityGUI!Text.allInstances().collect(t|t.size).asSet().size();"		
		range {
			type: integer
			min: 1
			max: 2
			unit: "font sizes"
		}
		correction:	"
			var maxSizes = 2;
			var validSizes : Set;
			for (t in UsabilityGUI!Text.allInstances()) {
				if (validSizes.size() < maxSizes) {
					// We collect valid sizes until reaching the limit
					validSizes.add(t.size);
				}
				else if (not validSizes.includes(t.size)) {
					// We get the closest valid size
					var newSize = validSizes.sortBy(s|(t.size-s).abs()).first();
					// We set the new size
					t.guiElement.font.size = newSize;				
				}
			}"	
	}
	
	rule {
		name: "Tabfocus"	
		description {
			definition: "Checks if the tabfocus property has been set in a proper, consistent way on the elements inside a panel"
			errorMessage: "Tabfocus property has not been set correctly on the elements of the panel"
		}
		importance: Medium
		elementType: "Container"
		calculation: "
			// Tabfocus in the panel sorted by its value
			var orderedTabfocus = usabilityElement.content.select(elem | elem.isTypeOf(UsabilityGUI!Tabfocus)).sortBy(elem | elem.value);
	
			var errors = '';
	
			// If there are no elements with tabfocus property, we finish
			if (orderedTabfocus.size() == 0) return errors;
			// The first tabfocus defined must be zero
			if (orderedTabfocus.first().value <> 0) errors = errors + 'The first tabfocus defined must be zero. ';
	
			for (i in Sequence{1..orderedTabfocus.size()-1}) {	
				var tabfocus = orderedTabfocus.at(i);
				var previousTabfocus = orderedTabfocus.at(i-1);
				
				// The tabfocus number must be incremental, no gaps
				if (tabfocus.value <> previousTabfocus.value + 1) {
					errors = errors + 'The tabfocus number must be incremental, no gaps or repetitions. ';
				}
				// The element must be around the same vertical position or lower than its predecessor
				if (previousTabfocus.box.position.y - tabfocus.box.position.y > 5) {		
					errors = errors + 'The element ' + tabfocus.guiElement.name + ' is higher than its predecessor. ';
				}
				// If it's around the same vertical position, it must be on the right of its predecessor
				var verticalDifference = (tabfocus.box.position.y - previousTabfocus.box.position.y).abs();
				if (verticalDifference <= 5 and tabfocus.box.position.x < previousTabfocus.box.position.x) {
					errors = errors + 'The element ' + tabfocus.guiElement.name + ' is around the same vertical position but on the left of its predecessor';
				}		
			}
		
			return errors;		
		"		
		range {
			type: string
			correctValues: "''"
		}	
	}
	
	rule {
		name: "Foreground color palette"	
		description {
			definition: "Checks if the foreground color of the element is in the required palette"
			errorMessage: "The foreground color of the element is not in the palette"
		}
		importance: High
		elementType: "Color"
		restriction: "return usabilityElement.foreground.isDefined();"
		calculation: "return usabilityElement.foreground;"		
		range {
			type: string
			correctValues: "'#000000','#FF0000','#00FF00','#0000FF','#FFFF00','#00FFFF','#FF00FF','#FFFFFF','#E1E1E1', '#a7a7a7'"
		}
		correction:	"
			var colorPalette = Sequence{'#000000','#FF0000','#00FF00','#0000FF','#FFFF00','#00FFFF','#FF00FF','#FFFFFF','#E1E1E1'};	
			var closestColor = colorPalette.sortBy(c|((usabilityElement.foreground.getR()-c.getR()).pow(2) + (usabilityElement.foreground.getG()-c.getG()).pow(2) + (usabilityElement.foreground.getB()-c.getB()).pow(2)).pow(0.5)).first();
			usabilityElement.guiElement.color.foreground = closestColor;		
		"	
	}
	
	rule {
		name: "Background color palette"	
		description {
			definition: "Checks if the background color of the element is in the required palette"
			errorMessage: "The background color of the element is not in the palette"
		}
		importance: High
		elementType: "Color"
		restriction: "return usabilityElement.background.isDefined();"	
		calculation: "return usabilityElement.background;"		
		range {
			type: string
			correctValues: "'#000000','#FF0000','#00FF00','#0000FF','#FFFF00','#00FFFF','#FF00FF','#FFFFFF','#E1E1E1', '#d9d9d9'"
		}
		correction:	"
			var colorPalette = Sequence{'#000000','#FF0000','#00FF00','#0000FF','#FFFF00','#00FFFF','#FF00FF','#FFFFFF','#E1E1E1'};	
			var closestColor = colorPalette.sortBy(c|((usabilityElement.background.getR()-c.getR()).pow(2) + (usabilityElement.background.getG()-c.getG()).pow(2) + (usabilityElement.background.getB()-c.getB()).pow(2)).pow(0.5)).first();
			usabilityElement.guiElement.color.background = closestColor;		
		"	
	}
	
	rule {
		name: "Contrast"	
		description {
			definition: "Checks the contrast between an element´s foreground and background color"
			errorMessage: "Low contrast between foreground and background colors"
		}
		importance: High
		elementType: "Color"
		restriction: "return usabilityElement.foreground.isDefined() and usabilityElement.background.isDefined();"
		calculation: "return (usabilityElement.background.getLuminance().max(usabilityElement.foreground.getLuminance())+0.05)/(usabilityElement.background.getLuminance().min(usabilityElement.foreground.getLuminance())+0.05);"
		range {
			type: double
			min: 4.5
			max: -1.0
		}	
	}
	
	rule {
		name: "Separation"	
		description {
			definition: "Checks the separation between an element and the rest inside the same container"
			errorMessage: "The element is too close to other elements in its container"
		}
		importance: High
		elementType: "Box"
		restriction: "return usabilityElement.container.isDefined();"
		calculation: "return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and not((usabilityElement.position.x - (e2.position.x+e2.dimension.x) >= 5) or (e2.position.x - (usabilityElement.position.x+usabilityElement.dimension.x) >= 5) or (usabilityElement.position.y - (e2.position.y+e2.dimension.y) >= 5) or (e2.position.y - (usabilityElement.position.y+usabilityElement.dimension.y) >= 5))).collect(e2|e2.guiElement.name).concat(',');"		
		range {
			type: string
			correctValues: "''"
		}
		correction:	"
			var minDistance = 5;

			// We get the conflicting elements
			var elements = usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and not((usabilityElement.position.x - (e2.position.x+e2.dimension.x) >= minDistance) or (e2.position.x - (usabilityElement.position.x+usabilityElement.dimension.x) >= minDistance) or (usabilityElement.position.y - (e2.position.y+e2.dimension.y) >= minDistance) or (e2.position.y - (usabilityElement.position.y+usabilityElement.dimension.y) >= minDistance)));

			// For each of them:
			for (other : UsabilityGUI!Box in elements) {
				// We get the distances between the different edges
				var right =	other.position.x - (usabilityElement.position.x + usabilityElement.dimension.x);
				var left = (other.position.x + other.dimension.x) - usabilityElement.position.x;
				var bottom = other.position.y - (usabilityElement.position.y + usabilityElement.dimension.y);
				var top = (other.position.y + other.dimension.y) - usabilityElement.position.y;
			
				// We get the minimum
				var min = Sequence{right, left, bottom, top}.sortBy(v|v.abs()).first();
		
				// We move the other element in that direction
				switch (min) {
					case right : other.guiElement.position.x = other.position.x - min + minDistance;
					case left : other.guiElement.position.x = other.position.x - min - minDistance;
					case bottom : other.guiElement.position.y = other.position.y - min + minDistance;
					case top : other.guiElement.position.y =  other.position.y - min - minDistance;
				}
      			other.position.x = other.guiElement.position.x;
      			other.position.y = other.guiElement.position.y;
			}		
		"	
	}
	
	rule {
		name: "Font types"	
		description {
			definition: "Checks the number of distinct font types used in the interface"
			errorMessage: "Too many distinct font types"
		}
		importance: High
		elementType: "GUI"
		calculation: "return UsabilityGUI!Text.allInstances().collect(t|t.font).asSet().size();"		
		range {
			type: integer
			min: 1
			max: 2
			unit: "font types"
		}
		correction:	"
			var maxTypes = 2;
			var validTypes : Set;
			for (t in UsabilityGUI!Text.allInstances()) {
				if (validTypes.size() < maxTypes) {
					// We collect valid types until reaching the limit
					validTypes.add(t.font);
				}
				else if (not validTypes.includes(t.font)) {
					// We get the first font type
					var newType = validTypes.first();
					// We set the new size
					t.guiElement.font.family = newType;				
				}
			}		
		"	
	}
	
	rule {
		name: "Label input separation"	
		description {
			definition: "Checks the separation between an input field and its corresponding label"
			errorMessage: "The label is too far from its input field"
		}
		importance: Medium 
		elementType: "Input"
		restriction: "return usabilityElement.label.isDefined();"
		calculation: "return (usabilityElement.box.position.x-(usabilityElement.label.box.position.x+usabilityElement.label.box.dimension.x)).max(usabilityElement.box.position.y-(usabilityElement.label.box.position.y+usabilityElement.label.box.dimension.y));"		
		range {
			type: integer
			min: 0
			max: 25
			unit: "dp"
		}
		correction:	"
			var horizontal = usabilityElement.box.position.x-(usabilityElement.label.box.position.x+usabilityElement.label.box.dimension.x);
			var vertical = usabilityElement.box.position.y-(usabilityElement.label.box.position.y+usabilityElement.label.box.dimension.y);
			
			if (horizontal > vertical) {
				usabilityElement.label.box.position.x = usabilityElement.label.box.position.x + (horizontal - 30);
				usabilityElement.label.guiElement.position.x = usabilityElement.label.box.position.x;
			}
			else {
				usabilityElement.label.box.position.y = usabilityElement.label.box.position.y + (vertical -30);
				usabilityElement.label.guiElement.position.y = usabilityElement.label.box.position.y;
			}		
		"	
	}
	
	rule {
		name: "Menu depth"	
		description {
			definition: "Checks the maximum depth of the menu structure"
			errorMessage: "Menu structure is too deep"
		}
		importance: Medium
		elementType: "Menu"
		calculation: "
			var stack = new Sequence;
			stack.add(usabilityElement);
			var depth = 0;
			var maxDepth = 0;
			var count = 0;
	
			while(not stack.isEmpty()) {
				var last = stack.last();
				stack.remove(last);
				// Extraction of an already explored father
				if (last.isKindOf(Real)) {
					depth = depth - 1;
				}
				else if (not last.items.isEmpty()) {
					// We replace a father by a number
					stack.add(count);   
					stack.addAll(last.items);
					depth = depth + 1;
					if (depth > maxDepth)
						maxDepth = depth;
				}
				count = count + 1;
			}
			return maxDepth;		
		"		
		range {
			type: integer
			min: 1
			max: 3
			unit: "levels"
		}	
	}	
	
	rule {
		name: "Label text length"	
		description {
			definition: "Checks whether the text of a label is too long or not"
			errorMessage: "Label text is too long"
		}
		importance: Medium
		elementType: "Label"
		calculation: "return usabilityElement.text.text.length();"		
		range {
			type: integer
			min: 1
			max: 50
			unit: "characters"
		}
		correction:	"usabilityElement.guiElement.text = usabilityElement.text.text.substring(0, 49);"	
	}
	
	rule {
		name: "Font size"	
		description {
			definition: "Checks the minimum font size for any text element"
			errorMessage: "Font size is too small"
		}
		importance: High
		elementType: "Text"
		calculation: "return usabilityElement.size;"
		range {
			type: double
			min: 24.0
			max: -1.0
		}
		correction:	"usabilityElement.guiElement.font.size = 10.0;"	
	}

	rule {
		name: "Vertical alignment"	
		description {
			definition: "Checks if an element is vertically aligned with the rest of elements in its container"
			errorMessage: "The element is not  vertically aligned with other elements in its container"
		}
		importance: High
		elementType: "Box"
		restriction: "return usabilityElement.container.isDefined();"
		calculation: "
			var margin = 10;
			return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and (((usabilityElement.position.y-e2.position.y).abs()>0 and (usabilityElement.position.y-e2.position.y).abs()<margin) or (((usabilityElement.position.y+usabilityElement.dimension.y) - (e2.position.y+e2.dimension.y)).abs()>0 and ((usabilityElement.position.y+usabilityElement.dimension.y) - (e2.position.y+e2.dimension.y)).abs()<margin))).collect(e2|e2.guiElement.name).concat(',');	
		"		
		range {
			type: string
			correctValues: "''"
		}
		correction:	"
			// We get the not aligned elements
			var margin = 10;
			var elements = usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and (((usabilityElement.position.y-e2.position.y).abs()>0 and (usabilityElement.position.y-e2.position.y).abs()<margin) or (((usabilityElement.position.y+usabilityElement.dimension.y) - (e2.position.y+e2.dimension.y)).abs()>0 and ((usabilityElement.position.y+usabilityElement.dimension.y) - (e2.position.y+e2.dimension.y)).abs()<margin)));

			// For each of them:
			for (other : UsabilityGUI!Box in elements) {
				// We get the minimum distance between the vertical positions (top or bottom)
				var top =	usabilityElement.position.y-other.position.y;
				var bottom = (usabilityElement.position.y+usabilityElement.dimension.y) - (other.position.y+other.dimension.y);
			
				// We get the minimum
				var min = Sequence{top, bottom}.sortBy(v|v.abs()).first();
		
				// We move the other element in that direction
				other.position.y = other.position.y + min;
				other.guiElement.position.y = other.position.y;
			}		
		"	
	}
	
	rule {
		name: "Horizontal alignment"	
		description {
			definition: "Checks if an element is horizontally aligned with the rest of elements in its container"
			errorMessage: "The element is not horizontally aligned with other elements in its container"
		}
		importance: High
		elementType: "Box"
		restriction: "return usabilityElement.container.isDefined();"
		calculation: "
			var margin = 30;
			return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and (((usabilityElement.position.x-e2.position.x).abs()>0 and (usabilityElement.position.x-e2.position.x).abs()<margin) or (((usabilityElement.position.x+usabilityElement.dimension.x) - (e2.position.x+e2.dimension.x)).abs()>0 and ((usabilityElement.position.x+usabilityElement.dimension.x) - (e2.position.x+e2.dimension.x)).abs()<margin))).collect(e2|e2.guiElement.name).concat(',');		
		"		
		range {
			type: string
			correctValues: "''"
		}
		correction:	"
			// We get the not aligned elements
			var margin = 30;
			var elements = usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and (((usabilityElement.position.x-e2.position.x).abs()>0 and (usabilityElement.position.x-e2.position.x).abs()<margin) or (((usabilityElement.position.x+usabilityElement.dimension.x) - (e2.position.x+e2.dimension.x)).abs()>0 and ((usabilityElement.position.x+usabilityElement.dimension.x) - (e2.position.x+e2.dimension.x)).abs()<margin)));

			// For each of them:
			for (other : UsabilityGUI!Box in elements) {
				// We get the minimum distance between the horizontal positions (left or right)
				var left =	usabilityElement.position.x-other.position.x;
				var right = (usabilityElement.position.x+usabilityElement.dimension.x) - (other.position.x+other.dimension.x);	
		
				// We get the minimum
				var min = Sequence{right, left}.sortBy(v|v.abs()).first();
		
				// We move the other element in that direction
				other.position.x = other.position.x + min;
				other.guiElement.position.x = other.position.x;
			}		
		"	
	}
	
	rule {
		name: "Number of elements"	
		description {
			definition: "Checks the total number of elements in a container"
			errorMessage: "Too many elements in this container"
		}
		importance: Low
		elementType: "Container"
		calculation: "return usabilityElement.content.select(b|b.isTypeOf(UsabilityGUI!Box)).size();"		
		range {
			type: integer
			min: 0
			max: 20
			unit: "elements"
		}	
	}
	
	rule {
		name: "Labeled input"	
		description {
			definition: "Checks if an input has its corresponding label"
			errorMessage: "This input does not have any label associated"
		}
		importance: High
		elementType: "Input"
		calculation: "return usabilityElement.label.isDefined();"
		range {
			type: boolean
			correctValue: true
		}	
	}
	
	rule {
		name: "Accessibility information"	
		description {
			definition: "Checks if accessibility information has been set for an element"
			errorMessage: "Accessibility information has not been set"
		}
		importance: Medium
		elementType: "AccessibilityInformation"
		calculation: "return usabilityElement.info.length()>0;"		
		range {
			type: boolean
			correctValue: true
		}	
	}
	
	rule {
		name: "Tooltip"	
		description {
			definition: "Checks if tooltip text has been set for an element"
			errorMessage: "Tooltip text has not been set"
		}
		importance: Low
		elementType: "Tooltip"
		calculation: "return usabilityElement.text.length() > 0;"		
		range {
			type: boolean
			correctValue: true
		}	
	}
	
	rule {
		name: "Overlap"	
		description {
			definition: "Checks if the element overlaps other elements in its container"
			errorMessage: "This element overlaps other elements in its container"
		}
		importance: High
		elementType: "Box"
		restriction: "return usabilityElement.container.isDefined();"
		calculation: "return usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and not((usabilityElement.position.x >= (e2.position.x+e2.dimension.x)) or ((usabilityElement.position.x+usabilityElement.dimension.x) <= e2.position.x) or (usabilityElement.position.y >= (e2.position.y+e2.dimension.y)) or ((usabilityElement.position.y+usabilityElement.dimension.y) <= e2.position.y))).collect(e2|e2.guiElement.name).concat(',');"		
		range {
			type: string
			correctValues: "''"
		}
		correction:	"
			// We get the overlapped elements
			var elements = usabilityElement.container.content.select(e2|e2.isTypeOf(UsabilityGUI!Box) and e2<>usabilityElement and not((usabilityElement.position.x >= (e2.position.x+e2.dimension.x)) or ((usabilityElement.position.x+usabilityElement.dimension.x) <= e2.position.x) or (usabilityElement.position.y >= (e2.position.y+e2.dimension.y)) or ((usabilityElement.position.y+usabilityElement.dimension.y) <= e2.position.y)));
			
			// For each of them:
			for (other : UsabilityGUI!Box in elements) {
				// We get the distances between the different edges
				var right =	other.position.x - (usabilityElement.position.x + usabilityElement.dimension.x);
				var left = (other.position.x + other.dimension.x) - usabilityElement.position.x;
				var bottom = other.position.y - (usabilityElement.position.y + usabilityElement.dimension.y);
				var top = (other.position.y + other.dimension.y) - usabilityElement.position.y;
		
				// We get the minimum
				var min = Sequence{right, left, bottom, top}.sortBy(v|v.abs()).first();
		
				// We move the other element in that direction
				if (right == min or left == min) {
					other.position.x = other.position.x - min;
					other.guiElement.position.x = other.position.x;
      			}
				else {
					other.position.y = other.position.y - min;
					other.guiElement.position.y = other.position.y;
      			}
			}		
		"	
	}
}